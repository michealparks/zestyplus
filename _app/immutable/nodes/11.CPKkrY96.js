import{c as m1,b as r1,t as c1}from"../chunks/disclose-version.CY5IDNoG.js";import{p as o1,G as s1,t as l1,y as n1,E as z1,z as K,w as p1}from"../chunks/runtime.XPaRurxh.js";import{e as A1,i as b1}from"../chunks/each.BoW94gwA.js";import{c as q}from"../chunks/svelte-component.De3lsk1i.js";import{d as g1,D as v1,B as t1,K as e1,L as M1,V as f1,C as W,G as h1,N as w1,a as d1,T as Y,u as C1,i as _1,U as P1}from"../chunks/T.y93Wq12a.js";import"../chunks/index.Cv2FY5Xh.js";import{O as U1}from"../chunks/OrbitControls.gSqUzVJP.js";import"../chunks/legacy.PQa5ncrZ.js";import{s as D1}from"../chunks/snippet.CMdN7rSJ.js";import{p as x1,b as F1,r as $1}from"../chunks/props.Dz65N0hT.js";import{u as S1}from"../chunks/auth.svelte.CNkesG8U.js";import{L as B1}from"../chunks/Lightformer.Cq_qJzHd.js";class I1 extends g1{constructor(P,C,$=!1,G=!1,T=1e4){const y=new v1;super(y,C),this.isMarchingCubes=!0;const t=this,_=new Float32Array(12*3),g=new Float32Array(12*3),v=new Float32Array(12*3);this.enableUvs=$,this.enableColors=G,this.init=function(a){this.resolution=a,this.isolation=80,this.size=a,this.size2=this.size*this.size,this.size3=this.size2*this.size,this.halfsize=this.size/2,this.delta=2/this.size,this.yd=this.size,this.zd=this.size2,this.field=new Float32Array(this.size3),this.normal_cache=new Float32Array(this.size3*3),this.palette=new Float32Array(this.size3*3),this.count=0;const e=T*3;this.positionArray=new Float32Array(e*3);const n=new t1(this.positionArray,3);n.setUsage(e1),y.setAttribute("position",n),this.normalArray=new Float32Array(e*3);const s=new t1(this.normalArray,3);if(s.setUsage(e1),y.setAttribute("normal",s),this.enableUvs){this.uvArray=new Float32Array(e*2);const r=new t1(this.uvArray,2);r.setUsage(e1),y.setAttribute("uv",r)}if(this.enableColors){this.colorArray=new Float32Array(e*3);const r=new t1(this.colorArray,3);r.setUsage(e1),y.setAttribute("color",r)}y.boundingSphere=new M1(new f1,1)};function z(a,e,n){return a+(e-a)*n}function Z(a,e,n,s,r,x,i,c,l,h){const o=(n-i)/(c-i),f=t.normal_cache;_[e+0]=s+o*t.delta,_[e+1]=r,_[e+2]=x,g[e+0]=z(f[a+0],f[a+3],o),g[e+1]=z(f[a+1],f[a+4],o),g[e+2]=z(f[a+2],f[a+5],o),v[e+0]=z(t.palette[l*3+0],t.palette[h*3+0],o),v[e+1]=z(t.palette[l*3+1],t.palette[h*3+1],o),v[e+2]=z(t.palette[l*3+2],t.palette[h*3+2],o)}function E(a,e,n,s,r,x,i,c,l,h){const o=(n-i)/(c-i),f=t.normal_cache;_[e+0]=s,_[e+1]=r+o*t.delta,_[e+2]=x;const d=a+t.yd*3;g[e+0]=z(f[a+0],f[d+0],o),g[e+1]=z(f[a+1],f[d+1],o),g[e+2]=z(f[a+2],f[d+2],o),v[e+0]=z(t.palette[l*3+0],t.palette[h*3+0],o),v[e+1]=z(t.palette[l*3+1],t.palette[h*3+1],o),v[e+2]=z(t.palette[l*3+2],t.palette[h*3+2],o)}function O(a,e,n,s,r,x,i,c,l,h){const o=(n-i)/(c-i),f=t.normal_cache;_[e+0]=s,_[e+1]=r,_[e+2]=x+o*t.delta;const d=a+t.zd*3;g[e+0]=z(f[a+0],f[d+0],o),g[e+1]=z(f[a+1],f[d+1],o),g[e+2]=z(f[a+2],f[d+2],o),v[e+0]=z(t.palette[l*3+0],t.palette[h*3+0],o),v[e+1]=z(t.palette[l*3+1],t.palette[h*3+1],o),v[e+2]=z(t.palette[l*3+2],t.palette[h*3+2],o)}function u(a){const e=a*3;t.normal_cache[e]===0&&(t.normal_cache[e+0]=t.field[a-1]-t.field[a+1],t.normal_cache[e+1]=t.field[a-t.yd]-t.field[a+t.yd],t.normal_cache[e+2]=t.field[a-t.zd]-t.field[a+t.zd])}function M(a,e,n,s,r){const x=s+1,i=s+t.yd,c=s+t.zd,l=x+t.yd,h=x+t.zd,o=s+t.yd+t.zd,f=x+t.yd+t.zd;let d=0;const m=t.field[s],b=t.field[x],U=t.field[i],D=t.field[l],S=t.field[c],B=t.field[h],w=t.field[o],F=t.field[f];m<r&&(d|=1),b<r&&(d|=2),U<r&&(d|=8),D<r&&(d|=4),S<r&&(d|=16),B<r&&(d|=32),w<r&&(d|=128),F<r&&(d|=64);const p=V1[d];if(p===0)return 0;const V=t.delta,X=a+V,L=e+V,R=n+V;p&1&&(u(s),u(x),Z(s*3,0,r,a,e,n,m,b,s,x)),p&2&&(u(x),u(l),E(x*3,3,r,X,e,n,b,D,x,l)),p&4&&(u(i),u(l),Z(i*3,6,r,a,L,n,U,D,i,l)),p&8&&(u(s),u(i),E(s*3,9,r,a,e,n,m,U,s,i)),p&16&&(u(c),u(h),Z(c*3,12,r,a,e,R,S,B,c,h)),p&32&&(u(h),u(f),E(h*3,15,r,X,e,R,B,F,h,f)),p&64&&(u(o),u(f),Z(o*3,18,r,a,L,R,w,F,o,f)),p&128&&(u(c),u(o),E(c*3,21,r,a,e,R,S,w,c,o)),p&256&&(u(s),u(c),O(s*3,24,r,a,e,n,m,S,s,c)),p&512&&(u(x),u(h),O(x*3,27,r,X,e,n,b,B,x,h)),p&1024&&(u(l),u(f),O(l*3,30,r,X,L,n,D,F,l,f)),p&2048&&(u(i),u(o),O(i*3,33,r,a,L,n,U,w,i,o)),d<<=4;let k,j,J,H=0,I=0;for(;a1[d+I]!=-1;)k=d+I,j=k+1,J=k+2,A(_,g,v,3*a1[k],3*a1[j],3*a1[J]),I+=3,H++;return H}function A(a,e,n,s,r,x){const i=t.count*3;if(t.positionArray[i+0]=a[s],t.positionArray[i+1]=a[s+1],t.positionArray[i+2]=a[s+2],t.positionArray[i+3]=a[r],t.positionArray[i+4]=a[r+1],t.positionArray[i+5]=a[r+2],t.positionArray[i+6]=a[x],t.positionArray[i+7]=a[x+1],t.positionArray[i+8]=a[x+2],t.material.flatShading===!0){const c=(e[s+0]+e[r+0]+e[x+0])/3,l=(e[s+1]+e[r+1]+e[x+1])/3,h=(e[s+2]+e[r+2]+e[x+2])/3;t.normalArray[i+0]=c,t.normalArray[i+1]=l,t.normalArray[i+2]=h,t.normalArray[i+3]=c,t.normalArray[i+4]=l,t.normalArray[i+5]=h,t.normalArray[i+6]=c,t.normalArray[i+7]=l,t.normalArray[i+8]=h}else t.normalArray[i+0]=e[s+0],t.normalArray[i+1]=e[s+1],t.normalArray[i+2]=e[s+2],t.normalArray[i+3]=e[r+0],t.normalArray[i+4]=e[r+1],t.normalArray[i+5]=e[r+2],t.normalArray[i+6]=e[x+0],t.normalArray[i+7]=e[x+1],t.normalArray[i+8]=e[x+2];if(t.enableUvs){const c=t.count*2;t.uvArray[c+0]=a[s+0],t.uvArray[c+1]=a[s+2],t.uvArray[c+2]=a[r+0],t.uvArray[c+3]=a[r+2],t.uvArray[c+4]=a[x+0],t.uvArray[c+5]=a[x+2]}t.enableColors&&(t.colorArray[i+0]=n[s+0],t.colorArray[i+1]=n[s+1],t.colorArray[i+2]=n[s+2],t.colorArray[i+3]=n[r+0],t.colorArray[i+4]=n[r+1],t.colorArray[i+5]=n[r+2],t.colorArray[i+6]=n[x+0],t.colorArray[i+7]=n[x+1],t.colorArray[i+8]=n[x+2]),t.count+=3}this.addBall=function(a,e,n,s,r,x){const i=Math.sign(s);s=Math.abs(s);const c=x!=null;let l=new W(a,e,n);if(c)try{l=x instanceof W?x:Array.isArray(x)?new W(Math.min(Math.abs(x[0]),1),Math.min(Math.abs(x[1]),1),Math.min(Math.abs(x[2]),1)):new W(x)}catch{l=new W(a,e,n)}const h=this.size*Math.sqrt(s/r),o=n*this.size,f=e*this.size,d=a*this.size;let m=Math.floor(o-h);m<1&&(m=1);let b=Math.floor(o+h);b>this.size-1&&(b=this.size-1);let U=Math.floor(f-h);U<1&&(U=1);let D=Math.floor(f+h);D>this.size-1&&(D=this.size-1);let S=Math.floor(d-h);S<1&&(S=1);let B=Math.floor(d+h);B>this.size-1&&(B=this.size-1);let w,F,p,V,X,L,R,k,j,J,H;for(p=m;p<b;p++)for(X=this.size2*p,k=p/this.size-n,j=k*k,F=U;F<D;F++)for(V=X+this.size*F,R=F/this.size-e,J=R*R,w=S;w<B;w++)if(L=w/this.size-a,H=s/(1e-6+L*L+J+j)-r,H>0){this.field[V+w]+=H*i;const I=Math.sqrt((w-d)*(w-d)+(F-f)*(F-f)+(p-o)*(p-o))/h,i1=1-I*I*I*(I*(I*6-15)+10);this.palette[(V+w)*3+0]+=l.r*i1,this.palette[(V+w)*3+1]+=l.g*i1,this.palette[(V+w)*3+2]+=l.b*i1}},this.addPlaneX=function(a,e){const n=this.size,s=this.yd,r=this.zd,x=this.field;let i,c,l,h,o,f,d,m=n*Math.sqrt(a/e);for(m>n&&(m=n),i=0;i<m;i++)if(f=i/n,h=f*f,o=a/(1e-4+h)-e,o>0)for(c=0;c<n;c++)for(d=i+c*s,l=0;l<n;l++)x[r*l+d]+=o},this.addPlaneY=function(a,e){const n=this.size,s=this.yd,r=this.zd,x=this.field;let i,c,l,h,o,f,d,m,b=n*Math.sqrt(a/e);for(b>n&&(b=n),c=0;c<b;c++)if(f=c/n,h=f*f,o=a/(1e-4+h)-e,o>0)for(d=c*s,i=0;i<n;i++)for(m=d+i,l=0;l<n;l++)x[r*l+m]+=o},this.addPlaneZ=function(a,e){const n=this.size,s=this.yd,r=this.zd,x=this.field;let i,c,l,h,o,f,d,m,b=n*Math.sqrt(a/e);for(b>n&&(b=n),l=0;l<b;l++)if(f=l/n,h=f*f,o=a/(1e-4+h)-e,o>0)for(d=r*l,c=0;c<n;c++)for(m=d+c*s,i=0;i<n;i++)x[m+i]+=o},this.setCell=function(a,e,n,s){const r=this.size2*n+this.size*e+a;this.field[r]=s},this.getCell=function(a,e,n){const s=this.size2*n+this.size*e+a;return this.field[s]},this.blur=function(a=1){const e=this.field,n=e.slice(),s=this.size,r=this.size2;for(let x=0;x<s;x++)for(let i=0;i<s;i++)for(let c=0;c<s;c++){const l=r*c+s*i+x;let h=n[l],o=1;for(let f=-1;f<=1;f+=2){const d=f+x;if(!(d<0||d>=s))for(let m=-1;m<=1;m+=2){const b=m+i;if(!(b<0||b>=s))for(let U=-1;U<=1;U+=2){const D=U+c;if(D<0||D>=s)continue;const S=r*D+s*b+d,B=n[S];o++,h+=a*(B-h)/o}}}e[l]=h}},this.reset=function(){for(let a=0;a<this.size3;a++)this.normal_cache[a*3]=0,this.field[a]=0,this.palette[a*3]=this.palette[a*3+1]=this.palette[a*3+2]=0},this.update=function(){this.count=0;const a=this.size-2;for(let e=1;e<a;e++){const n=this.size2*e,s=(e-this.halfsize)/this.halfsize;for(let r=1;r<a;r++){const x=n+this.size*r,i=(r-this.halfsize)/this.halfsize;for(let c=1;c<a;c++){const l=(c-this.halfsize)/this.halfsize,h=x+c;M(l,i,s,h,this.isolation)}}}this.geometry.setDrawRange(0,this.count),y.getAttribute("position").needsUpdate=!0,y.getAttribute("normal").needsUpdate=!0,this.enableUvs&&(y.getAttribute("uv").needsUpdate=!0),this.enableColors&&(y.getAttribute("color").needsUpdate=!0),this.count/3>T&&console.warn("THREE.MarchingCubes: Geometry buffers too small for rendering. Please create an instance with a higher poly count.")},this.init(P)}}const V1=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]),a1=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]);class u1 extends h1{constructor(P=.5,C=12,$=new W,G=""){super(),this.strength=P,this.subtract=C,this.color=$,this.animating=G}}class y1 extends h1{constructor(P="x",C=.5,$=12){super(),this.axis=P,this.strength=C,this.subtract=$}}const G1={x:"addPlaneX",y:"addPlaneY",z:"addPlaneZ"},Q=new f1;function T1(N,P){o1(P,!0);let C=x1(P,"resolution",3,75),$=x1(P,"ref",15),G=$1(P,["$$slots","$$events","$$legacy","resolution","children","ref"]);const T=new w1,y=new I1(C(),T,!0,!0,1e5);y.scale.setScalar(2),s1(()=>{C()!==y.resolution&&y.init(C())}),s1(()=>()=>{y.material!==T&&T.dispose()}),d1(()=>{y.reset();for(const t of y.children)t instanceof u1?(t.getWorldPosition(Q),Q.addScalar(1).multiplyScalar(.5),y.addBall(Q.x,Q.y,Q.z,t.strength,t.subtract,t.color)):t instanceof y1&&y[G1[t.axis]](t.strength,t.subtract);y.update()}),Y(N,F1({is:y},()=>G,{get ref(){return $()},set ref(t){$(t)},children:(t,_)=>{var g=m1(),v=n1(g);D1(v,()=>P.children??z1,()=>({ref:y})),r1(t,g)},$$slots:{default:!0}})),l1()}var L1=c1("<!> <!> <!>",1),R1=c1("<!> <!> <!> <!> <!>",1);function Q1(N,P){o1(P,!0);const{scene:C}=C1(),{frequencyData:$}=S1();s1(()=>(C.fog=new P1("black"),C.fog.far=20,C.fog.near=8,()=>C.fog=null));const G=30,T=.2,y=[],t=new _1;for(let u=0;u<G;u+=1){const M=(Math.random()-.5)*2,A=(Math.random()-.5)*2,a=t.set(M,A).multiplyScalar(T),e=new u1;e.color.setRGB(Math.random(),Math.random(),Math.random()),e.position.set(a.x,-1,a.y),y.push({marchingCube:e})}d1(u=>{for(let M=0;M<G;M+=1){const{marchingCube:A}=y[M];$.current[M]>150&&A.animating===""&&(A.animating="up",A.userData.x=-Math.PI/2),A.animating&&(A.position.y=.5*Math.sin(A.userData.x)-.5,A.userData.x+=u,A.userData.x>=3*Math.PI/2&&(A.animating=""))}});const _=new y1;_.axis="y";var g=R1(),v=n1(g);q(v,()=>Y.PerspectiveCamera,(u,M)=>{M(u,{makeDefault:!0,"position.z":15,"position.y":5,zoom:3,oncreate:A=>A.lookAt(0,0,0),children:(A,a)=>{U1(A,{autoRotate:!0,enablePan:!1,enableRotate:!1,enableZoom:!1})},$$slots:{default:!0}})});var z=K(v,2);q(z,()=>Y.AmbientLight,(u,M)=>{M(u,{})});var Z=K(z,2);q(Z,()=>Y.DirectionalLight,(u,M)=>{M(u,{intensity:3})});var E=K(Z,2);T1(E,{children:(u,M)=>{var A=L1(),a=n1(A);q(a,()=>Y.MeshStandardMaterial,(s,r)=>{r(s,{vertexColors:!0,roughness:.01})});var e=K(a,2);A1(e,17,()=>y,b1,(s,r)=>{let x=()=>p1(r).marchingCube;Y(s,{get is(){return x()}})});var n=K(e,2);Y(n,{is:_}),r1(u,A)},$$slots:{default:!0}});var O=K(E,2);B1(O,{}),r1(N,g),l1()}export{Q1 as component};
