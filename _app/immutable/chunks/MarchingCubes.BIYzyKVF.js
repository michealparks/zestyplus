import{c as r1,b as s1}from"./disclose-version.DxMWfzFv.js";import{w as x1,O as q,y as n1,a6 as c1,n as l1}from"./runtime.TNfRlsGO.js";import{s as f1}from"./snippet.BIPltzSI.js";import{p as t1,s as h1,r as o1}from"./props.J8c_Vd-h.js";import{M as d1,p as y1,B as W,q as j,r as u1,V as i1,C as R,s as z1}from"./three.module.iKKkBh6O.js";import{u as A1,T as m1}from"./T.5NVhIH70.js";import{MarchingCube as p1}from"./MarchingCube.C9u0vifK.js";import{MarchingPlane as b1}from"./MarchingPlane.AywroqmT.js";class w1 extends d1{constructor(T,Z,k=!1,K=!1,X=1e4){const u=new y1;super(u,Z),this.isMarchingCubes=!0;const t=this,_=new Float32Array(12*3),w=new Float32Array(12*3),M=new Float32Array(12*3);this.enableUvs=k,this.enableColors=K,this.init=function(e){this.resolution=e,this.isolation=80,this.size=e,this.size2=this.size*this.size,this.size3=this.size2*this.size,this.halfsize=this.size/2,this.delta=2/this.size,this.yd=this.size,this.zd=this.size2,this.field=new Float32Array(this.size3),this.normal_cache=new Float32Array(this.size3*3),this.palette=new Float32Array(this.size3*3),this.count=0;const i=X*3;this.positionArray=new Float32Array(i*3);const s=new W(this.positionArray,3);s.setUsage(j),u.setAttribute("position",s),this.normalArray=new Float32Array(i*3);const x=new W(this.normalArray,3);if(x.setUsage(j),u.setAttribute("normal",x),this.enableUvs){this.uvArray=new Float32Array(i*2);const r=new W(this.uvArray,2);r.setUsage(j),u.setAttribute("uv",r)}if(this.enableColors){this.colorArray=new Float32Array(i*3);const r=new W(this.colorArray,3);r.setUsage(j),u.setAttribute("color",r)}u.boundingSphere=new u1(new i1,1)};function p(e,i,s){return e+(i-e)*s}function H(e,i,s,x,r,n,a,c,f,o){const l=(s-a)/(c-a),h=t.normal_cache;_[i+0]=x+l*t.delta,_[i+1]=r,_[i+2]=n,w[i+0]=p(h[e+0],h[e+3],l),w[i+1]=p(h[e+1],h[e+4],l),w[i+2]=p(h[e+2],h[e+5],l),M[i+0]=p(t.palette[f*3+0],t.palette[o*3+0],l),M[i+1]=p(t.palette[f*3+1],t.palette[o*3+1],l),M[i+2]=p(t.palette[f*3+2],t.palette[o*3+2],l)}function N(e,i,s,x,r,n,a,c,f,o){const l=(s-a)/(c-a),h=t.normal_cache;_[i+0]=x,_[i+1]=r+l*t.delta,_[i+2]=n;const d=e+t.yd*3;w[i+0]=p(h[e+0],h[d+0],l),w[i+1]=p(h[e+1],h[d+1],l),w[i+2]=p(h[e+2],h[d+2],l),M[i+0]=p(t.palette[f*3+0],t.palette[o*3+0],l),M[i+1]=p(t.palette[f*3+1],t.palette[o*3+1],l),M[i+2]=p(t.palette[f*3+2],t.palette[o*3+2],l)}function O(e,i,s,x,r,n,a,c,f,o){const l=(s-a)/(c-a),h=t.normal_cache;_[i+0]=x,_[i+1]=r,_[i+2]=n+l*t.delta;const d=e+t.zd*3;w[i+0]=p(h[e+0],h[d+0],l),w[i+1]=p(h[e+1],h[d+1],l),w[i+2]=p(h[e+2],h[d+2],l),M[i+0]=p(t.palette[f*3+0],t.palette[o*3+0],l),M[i+1]=p(t.palette[f*3+1],t.palette[o*3+1],l),M[i+2]=p(t.palette[f*3+2],t.palette[o*3+2],l)}function y(e){const i=e*3;t.normal_cache[i]===0&&(t.normal_cache[i+0]=t.field[e-1]-t.field[e+1],t.normal_cache[i+1]=t.field[e-t.yd]-t.field[e+t.yd],t.normal_cache[i+2]=t.field[e-t.zd]-t.field[e+t.zd])}function e1(e,i,s,x,r){const n=x+1,a=x+t.yd,c=x+t.zd,f=n+t.yd,o=n+t.zd,l=x+t.yd+t.zd,h=n+t.yd+t.zd;let d=0;const z=t.field[x],m=t.field[n],g=t.field[a],v=t.field[f],U=t.field[c],F=t.field[o],b=t.field[l],C=t.field[h];z<r&&(d|=1),m<r&&(d|=2),g<r&&(d|=8),v<r&&(d|=4),U<r&&(d|=16),F<r&&(d|=32),b<r&&(d|=128),C<r&&(d|=64);const A=M1[d];if(A===0)return 0;const B=t.delta,D=e+B,S=i+B,V=s+B;A&1&&(y(x),y(n),H(x*3,0,r,e,i,s,z,m,x,n)),A&2&&(y(n),y(f),N(n*3,3,r,D,i,s,m,v,n,f)),A&4&&(y(a),y(f),H(a*3,6,r,e,S,s,g,v,a,f)),A&8&&(y(x),y(a),N(x*3,9,r,e,i,s,z,g,x,a)),A&16&&(y(c),y(o),H(c*3,12,r,e,i,V,U,F,c,o)),A&32&&(y(o),y(h),N(o*3,15,r,D,i,V,F,C,o,h)),A&64&&(y(l),y(h),H(l*3,18,r,e,S,V,b,C,l,h)),A&128&&(y(c),y(l),N(c*3,21,r,e,i,V,U,b,c,l)),A&256&&(y(x),y(c),O(x*3,24,r,e,i,s,z,U,x,c)),A&512&&(y(n),y(o),O(n*3,27,r,D,i,s,m,F,n,o)),A&1024&&(y(f),y(h),O(f*3,30,r,D,S,s,v,C,f,h)),A&2048&&(y(a),y(l),O(a*3,33,r,e,S,s,g,b,a,l)),d<<=4;let I,E,G,Y=0,P=0;for(;J[d+P]!=-1;)I=d+P,E=I+1,G=I+2,a1(_,w,M,3*J[I],3*J[E],3*J[G]),P+=3,Y++;return Y}function a1(e,i,s,x,r,n){const a=t.count*3;if(t.positionArray[a+0]=e[x],t.positionArray[a+1]=e[x+1],t.positionArray[a+2]=e[x+2],t.positionArray[a+3]=e[r],t.positionArray[a+4]=e[r+1],t.positionArray[a+5]=e[r+2],t.positionArray[a+6]=e[n],t.positionArray[a+7]=e[n+1],t.positionArray[a+8]=e[n+2],t.material.flatShading===!0){const c=(i[x+0]+i[r+0]+i[n+0])/3,f=(i[x+1]+i[r+1]+i[n+1])/3,o=(i[x+2]+i[r+2]+i[n+2])/3;t.normalArray[a+0]=c,t.normalArray[a+1]=f,t.normalArray[a+2]=o,t.normalArray[a+3]=c,t.normalArray[a+4]=f,t.normalArray[a+5]=o,t.normalArray[a+6]=c,t.normalArray[a+7]=f,t.normalArray[a+8]=o}else t.normalArray[a+0]=i[x+0],t.normalArray[a+1]=i[x+1],t.normalArray[a+2]=i[x+2],t.normalArray[a+3]=i[r+0],t.normalArray[a+4]=i[r+1],t.normalArray[a+5]=i[r+2],t.normalArray[a+6]=i[n+0],t.normalArray[a+7]=i[n+1],t.normalArray[a+8]=i[n+2];if(t.enableUvs){const c=t.count*2;t.uvArray[c+0]=e[x+0],t.uvArray[c+1]=e[x+2],t.uvArray[c+2]=e[r+0],t.uvArray[c+3]=e[r+2],t.uvArray[c+4]=e[n+0],t.uvArray[c+5]=e[n+2]}t.enableColors&&(t.colorArray[a+0]=s[x+0],t.colorArray[a+1]=s[x+1],t.colorArray[a+2]=s[x+2],t.colorArray[a+3]=s[r+0],t.colorArray[a+4]=s[r+1],t.colorArray[a+5]=s[r+2],t.colorArray[a+6]=s[n+0],t.colorArray[a+7]=s[n+1],t.colorArray[a+8]=s[n+2]),t.count+=3}this.addBall=function(e,i,s,x,r,n){const a=Math.sign(x);x=Math.abs(x);const c=n!=null;let f=new R(e,i,s);if(c)try{f=n instanceof R?n:Array.isArray(n)?new R(Math.min(Math.abs(n[0]),1),Math.min(Math.abs(n[1]),1),Math.min(Math.abs(n[2]),1)):new R(n)}catch{f=new R(e,i,s)}const o=this.size*Math.sqrt(x/r),l=s*this.size,h=i*this.size,d=e*this.size;let z=Math.floor(l-o);z<1&&(z=1);let m=Math.floor(l+o);m>this.size-1&&(m=this.size-1);let g=Math.floor(h-o);g<1&&(g=1);let v=Math.floor(h+o);v>this.size-1&&(v=this.size-1);let U=Math.floor(d-o);U<1&&(U=1);let F=Math.floor(d+o);F>this.size-1&&(F=this.size-1);let b,C,A,B,D,S,V,I,E,G,Y;for(A=z;A<m;A++)for(D=this.size2*A,I=A/this.size-s,E=I*I,C=g;C<v;C++)for(B=D+this.size*C,V=C/this.size-i,G=V*V,b=U;b<F;b++)if(S=b/this.size-e,Y=x/(1e-6+S*S+G+E)-r,Y>0){this.field[B+b]+=Y*a;const P=Math.sqrt((b-d)*(b-d)+(C-h)*(C-h)+(A-l)*(A-l))/o,L=1-P*P*P*(P*(P*6-15)+10);this.palette[(B+b)*3+0]+=f.r*L,this.palette[(B+b)*3+1]+=f.g*L,this.palette[(B+b)*3+2]+=f.b*L}},this.addPlaneX=function(e,i){const s=this.size,x=this.yd,r=this.zd,n=this.field;let a,c,f,o,l,h,d,z=s*Math.sqrt(e/i);for(z>s&&(z=s),a=0;a<z;a++)if(h=a/s,o=h*h,l=e/(1e-4+o)-i,l>0)for(c=0;c<s;c++)for(d=a+c*x,f=0;f<s;f++)n[r*f+d]+=l},this.addPlaneY=function(e,i){const s=this.size,x=this.yd,r=this.zd,n=this.field;let a,c,f,o,l,h,d,z,m=s*Math.sqrt(e/i);for(m>s&&(m=s),c=0;c<m;c++)if(h=c/s,o=h*h,l=e/(1e-4+o)-i,l>0)for(d=c*x,a=0;a<s;a++)for(z=d+a,f=0;f<s;f++)n[r*f+z]+=l},this.addPlaneZ=function(e,i){const s=this.size,x=this.yd,r=this.zd,n=this.field;let a,c,f,o,l,h,d,z,m=s*Math.sqrt(e/i);for(m>s&&(m=s),f=0;f<m;f++)if(h=f/s,o=h*h,l=e/(1e-4+o)-i,l>0)for(d=r*f,c=0;c<s;c++)for(z=d+c*x,a=0;a<s;a++)n[z+a]+=l},this.setCell=function(e,i,s,x){const r=this.size2*s+this.size*i+e;this.field[r]=x},this.getCell=function(e,i,s){const x=this.size2*s+this.size*i+e;return this.field[x]},this.blur=function(e=1){const i=this.field,s=i.slice(),x=this.size,r=this.size2;for(let n=0;n<x;n++)for(let a=0;a<x;a++)for(let c=0;c<x;c++){const f=r*c+x*a+n;let o=s[f],l=1;for(let h=-1;h<=1;h+=2){const d=h+n;if(!(d<0||d>=x))for(let z=-1;z<=1;z+=2){const m=z+a;if(!(m<0||m>=x))for(let g=-1;g<=1;g+=2){const v=g+c;if(v<0||v>=x)continue;const U=r*v+x*m+d,F=s[U];l++,o+=e*(F-o)/l}}}i[f]=o}},this.reset=function(){for(let e=0;e<this.size3;e++)this.normal_cache[e*3]=0,this.field[e]=0,this.palette[e*3]=this.palette[e*3+1]=this.palette[e*3+2]=0},this.update=function(){this.count=0;const e=this.size-2;for(let i=1;i<e;i++){const s=this.size2*i,x=(i-this.halfsize)/this.halfsize;for(let r=1;r<e;r++){const n=s+this.size*r,a=(r-this.halfsize)/this.halfsize;for(let c=1;c<e;c++){const f=(c-this.halfsize)/this.halfsize,o=n+c;e1(f,a,x,o,this.isolation)}}}this.geometry.setDrawRange(0,this.count),u.getAttribute("position").needsUpdate=!0,u.getAttribute("normal").needsUpdate=!0,this.enableUvs&&(u.getAttribute("uv").needsUpdate=!0),this.enableColors&&(u.getAttribute("color").needsUpdate=!0),this.count/3>X&&console.warn("THREE.MarchingCubes: Geometry buffers too small for rendering. Please create an instance with a higher poly count.")},this.init(T)}}const M1=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]),J=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),g1={x:"addPlaneX",y:"addPlaneY",z:"addPlaneZ"},$=new i1;function V1(Q,T){x1(T,!0);let Z=t1(T,"resolution",3,75),k=t1(T,"ref",15),K=o1(T,["$$slots","$$events","$$legacy","resolution","children","ref"]);const X=new z1,u=new w1(Z(),X,!0,!0,1e5);u.scale.setScalar(1.5),q(()=>{Z()!==u.resolution&&u.init(Z())}),q(()=>()=>{u.material!==X&&X.dispose()}),A1(()=>{u.reset();for(const t of u.children)t instanceof p1?(t.getWorldPosition($),$.addScalar(1).multiplyScalar(.5),u.addBall($.x,$.y,$.z,t.strength,t.subtract,t.color)):t instanceof b1&&u[g1[t.axis]](t.strength,t.subtract);u.update()}),m1(Q,h1({is:u},()=>K,{get ref(){return k()},set ref(t){k(t)},children:(t,_)=>{var w=r1(),M=c1(w);f1(M,()=>T.children??l1,()=>({ref:u})),s1(t,w)},$$slots:{default:!0}})),n1()}export{V1 as default};
