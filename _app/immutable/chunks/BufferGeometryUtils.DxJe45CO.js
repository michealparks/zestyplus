import{V as u,B as U,T as z,a as G,b as N}from"./T.Dho_lh33.js";function H(n,l){if(l===z)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),n;if(l===G||l===N){let o=n.getIndex();if(o===null){const t=[],m=n.getAttribute("position");if(m!==void 0){for(let s=0;s<m.count;s++)t.push(s);n.setIndex(t),o=n.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),n}const f=o.count-2,e=[];if(l===G)for(let t=1;t<=f;t++)e.push(o.getX(0)),e.push(o.getX(t)),e.push(o.getX(t+1));else for(let t=0;t<f;t++)t%2===0?(e.push(o.getX(t)),e.push(o.getX(t+1)),e.push(o.getX(t+2))):(e.push(o.getX(t+2)),e.push(o.getX(t+1)),e.push(o.getX(t)));e.length/3!==f&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const a=n.clone();return a.setIndex(e),a.clearGroups(),a}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",l),n}function R(n,l=Math.PI/3){const o=Math.cos(l),f=(1+1e-10)*100,e=[new u,new u,new u],a=new u,t=new u,m=new u,s=new u;function X(r){const d=~~(r.x*f),i=~~(r.y*f),b=~~(r.z*f);return`${d},${i},${b}`}const x=n.index?n.toNonIndexed():n,c=x.attributes.position,T={};for(let r=0,d=c.count/3;r<d;r++){const i=3*r,b=e[0].fromBufferAttribute(c,i+0),w=e[1].fromBufferAttribute(c,i+1),A=e[2].fromBufferAttribute(c,i+2);a.subVectors(A,w),t.subVectors(b,w);const p=new u().crossVectors(a,t).normalize();for(let g=0;g<3;g++){const B=e[g],h=X(B);h in T||(T[h]=[]),T[h].push(p)}}const M=new Float32Array(c.count*3),D=new U(M,3,!1);for(let r=0,d=c.count/3;r<d;r++){const i=3*r,b=e[0].fromBufferAttribute(c,i+0),w=e[1].fromBufferAttribute(c,i+1),A=e[2].fromBufferAttribute(c,i+2);a.subVectors(A,w),t.subVectors(b,w),m.crossVectors(a,t).normalize();for(let p=0;p<3;p++){const g=e[p],B=X(g),h=T[B];s.set(0,0,0);for(let V=0,I=h.length;V<I;V++){const E=h[V];m.dot(E)>o&&s.add(E)}s.normalize(),D.setXYZ(i+p,s.x,s.y,s.z)}}return x.setAttribute("normal",D),x}export{H as a,R as t};
